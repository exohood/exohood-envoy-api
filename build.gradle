import org.eclipse.jgit.api.errors.RefAlreadyExistsException

plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.18'
    id 'idea'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'io.github.gradle-nexus.publish-plugin' version "1.1.0"
}

group = "exohood.envoy"

ext.projectName = "envoy-api"
ext.projectDescription = "envoy-api"
ext.projectArtifactName = "envoy-api"
ext.projectGitHubRepoName = "envoy-envoy-api"
ext.projectScmUrl = "https://github.exohood/exohood-envoy-api"
ext.projectScmConnection = "scm:git:git://github.exohood/exohood-envoy-api.git"


repositories {
    mavenCentral()
    mavenLocal()
}

idea.project {
    vcs = 'Git'
    languageLevel = JavaVersion.VERSION_11
    targetBytecodeVersion = JavaVersion.VERSION_11
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

def grpcVersion = '1.45.1'
def protobufVersion = '3.19.2'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

apply plugin: "maven-publish"
apply plugin: "signing"

ext.artifactoryUser = project.hasProperty("artifactoryUser") ? project.artifactoryUser : System.env.ARTIFACTORY_USER as String
ext.artifactoryPassword = project.hasProperty("artifactoryPassword") ? project.artifactoryPassword : System.env.ARTIFACTORY_PASSWORD as String

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USER")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            afterEvaluate {
                artifactId = projectArtifactName
            }

            pom {
                name = projectName
                description = projectDescription
                url = projectScmUrl
                packaging = "jar"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'JJUZUMAKI'
                        name = 'JJ Uzumaki'
                        email = "jjuzumaki@proton.me"
                        organization = "Exohood Protocol"
                        organizationUrl = "https://github.com/exohood"
                    }
                }
                scm {
                    connection = projectScmConnection
                    developerConnection = projectScmConnection
                    url = projectScmUrl
                }
            }
        }
    }

    if (System.getenv("OSS_SIGNING_KEY")) {
        signing {
            useInMemoryPgpKeys(System.getenv("OSS_SIGNING_KEY"), System.getenv("OSS_SIGNING_PASSWORD"))
            sign publishing.publications.mavenJava
        }
    }

    repositories {
        maven {
            url System.getenv("MAVEN_URL")
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

task tagRelease {
    doLast {
        try {
            grgit.tag.add {
                name = "v$version"
                message = "Release of ${version}"
            }
            grgit.push(refsOrSpecs: ["v$version"])
        }
        catch (RefAlreadyExistsException ignored) {
            logger.warn("Tag v$version already exists.")
        }
    }
}
